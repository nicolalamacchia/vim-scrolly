" Author: Nicola Lamacchia

Before:
  let g:scrolly_minwidth        = 150
  let g:scrolly_width           = 20
  let g:scrolly_borders_outside = 1
  let g:scrolly_loc_limit       = 1000
  let g:scrolly_show_errors     = 1
  let g:scrolly_symbols         = {
        \ 'left': '▐',
        \ 'right': '▌',
        \ 'current_line': '█',
        \ 'space': ' ',
        \ 'visible': '▒',
        \ 'error_in_line': '▀',
        \ 'error_in_view': '▓',
        \ 'error': '▄',
        \ 'overflow_line': '╲'
        \ }

" Test 1:
Execute (Window width below minimum returns empty string):
  let result = scrolly#calculate(100, 30, 0, 9, 5, 100, [])
Then (Should return an empty string):
  AssertEqual '', result

" Test 2:
Execute (Normal case without overflow and no errors):
  let result = scrolly#calculate(200, 20, 10, 19, 15, 100, [])
Then (Should return the expected bar):
  AssertEqual '▐  ▒█                ▌', result

" Test 3:
Execute (Overflow case without errors):
  let result = scrolly#calculate(200, 30, 10, 29, 20, 30, [])
Then (Should return the bar with overflow markers):
  AssertEqual '▐     ▒▒▒▒▒█▒▒▒▒╲╲╲╲╲▌', result

" Test 4:
Execute (Process errors from location list):
  let result = scrolly#calculate(200, 20, 10, 19, 15, 100, [{'lnum': 16}, {'lnum': 11}, {'lnum': 50}])
Then (Should return the bar with error symbols):
  AssertEqual '▐  ▓▀     ▄          ▌', result

" Test 5:
Execute (Error display disabled – errors ignored):
  let g:scrolly_show_errors = 0
  let result = scrolly#calculate(200, 20, 10, 19, 15, 100, [{'lnum': 16}, {'lnum': 11}, {'lnum': 50}])
Then (Should return the bar without error markings):
  AssertEqual '▐  ▒█                ▌', result

" Test 6:
Execute (Borders outside disabled – modify inner bar):
  let g:scrolly_borders_outside = 0
  let result = scrolly#calculate(200, 20, 10, 19, 15, 100, [])
Then (Should return the bar with replaced border characters):
  AssertEqual '▐ ▒█               ▌', result

" Test 7:
Execute (Out-of-range error lines ignored):
  let g:scrolly_borders_outside = 0
  let result = scrolly#calculate(200, 20, 10, 19, 15, 100, [{'lnum': 0}, {'lnum': 101}])
Then (Should return the unmodified bar):
  AssertEqual '▐ ▒█               ▌', result

" Test 8:
Execute (Document with window height 50 and total lines 50, current line at top):
  let result = scrolly#calculate(200, 50, 0, 49, 0, 50, [])
Then (Should mark the first line as current):
  AssertEqual '▐█▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▌', result

" Test 9:
Execute (Document with window height 50 and total lines 50, current line at bottom):
  let result = scrolly#calculate(200, 50, 0, 49, 49, 50, [])
Then (Should mark the last line as current):
  AssertEqual '▐▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒█▌', result

" Test 10:
Execute (Document with window height 50 and total lines 50, current line in the middle):
  let result = scrolly#calculate(200, 50, 0, 49, 25, 50, [])
Then (Should mark the middle line as current):
  AssertEqual '▐▒▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒▌', result

" Test 11:
Execute (Document with window height 51 and total lines 51, current line at top):
  let result = scrolly#calculate(200, 51, 0, 50, 0, 51, [])
Then (Should mark the first line correctly):
  AssertEqual '▐█▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▌', result

" Test 12:
Execute (Document with window height 51 and total lines 51, current line at bottom):
  let result = scrolly#calculate(200, 51, 0, 50, 50, 51, [])
Then (Should mark the last line correctly):
  AssertEqual '▐▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒█▌', result

" Test 13:
Execute (Document with window height 53 and total lines 53, current line in the middle):
  let result = scrolly#calculate(200, 53, 0, 52, 26, 53, [])
Then (Should mark the middle line as current):
  AssertEqual '▐▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒▒▌', result

" Test 14:
Execute (Document with window height 50 and total lines 24, current line at top - overflow):
  let result = scrolly#calculate(200, 50, 0, 23, 0, 24, [])
Then (Should return bar with overflow and current line at start):
  AssertEqual '▐█▒▒▒▒▒▒▒▒╲╲╲╲╲╲╲╲╲╲╲▌', result

" Test 15:
Execute (Document with window height 50 and total lines 26, current line at top - overflow):
  let result = scrolly#calculate(200, 50, 0, 25, 0, 26, [])
Then (Should return bar with adjusted width and current line at start):
  AssertEqual '▐█▒▒▒▒▒▒▒▒▒╲╲╲╲╲╲╲╲╲╲▌', result

" Test 16:
Execute (Document with window height 50 and total lines 23, current line at position 1 - overflow):
  let result = scrolly#calculate(200, 50, 0, 22, 1, 23, [])
Then (Should return bar with overflow markers and current line marked):
  AssertEqual '▐█▒▒▒▒▒▒▒▒╲╲╲╲╲╲╲╲╲╲╲▌', result

" Test 17:
Execute (Document with window height 51 and total lines 24, current line at top - overflow):
  let result = scrolly#calculate(200, 51, 0, 23, 0, 24, [])
Then (Should return bar with proper scaling and current line at start):
  AssertEqual '▐█▒▒▒▒▒▒▒▒╲╲╲╲╲╲╲╲╲╲╲▌', result

" Test 18:
Execute (Document with window height 50 and total lines 84, current line at top - document larger than window):
  let result = scrolly#calculate(200, 50, 10, 59, 10, 84, [])
Then (Should return bar with correct placement for top current line):
  AssertEqual '▐  █▒▒▒▒▒▒▒▒▒▒▒      ▌', result

" Test 19:
Execute (Document with window height 51 and total lines 83, current line at bottom - document larger than window):
  let result = scrolly#calculate(200, 51, 10, 60, 60, 83, [])
Then (Should return bar with correct placement for bottom current line):
  AssertEqual '▐  ▒▒▒▒▒▒▒▒▒▒▒▒█     ▌', result

" Test 20:
Execute (Document with very large file - 10,000+ lines):
  let result = scrolly#calculate(200, 50, 5000, 5049, 5025, 10000, [])
Then (Should correctly represent a small window in a large file):
  AssertEqual '▐          █         ▌', result

" Test 21:
Execute (Many errors near the g:scrolly_loc_limit):
  let large_error_list = []
  for i in range(1, 999)
    call add(large_error_list, {'lnum': i})
  endfor
  let result = scrolly#calculate(200, 50, 0, 49, 25, 1000, large_error_list)
Then (Should handle many errors appropriately):
  AssertEqual '▐▀▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▌', result

" Test 22:
Execute (Errors clustered in one area):
  let clustered_errors = []
  for i in range(30, 39)
    call add(clustered_errors, {'lnum': i})
  endfor
  let result = scrolly#calculate(200, 100, 0, 99, 50, 100, clustered_errors)
Then (Should show errors clustered in the right section):
  AssertEqual '▐▒▒▒▒▒▓▓▓▒▒█▒▒▒▒▒▒▒▒▒▌', result

" Test 23:
Execute (Current line exactly at edge of visible window - top):
  let result = scrolly#calculate(200, 20, 10, 29, 10, 100, [])
Then (Should show current line at start of visible section):
  AssertEqual '▐  █▒▒▒              ▌', result

" Test 24:
Execute (Current line exactly at edge of visible window - bottom):
  let result = scrolly#calculate(200, 20, 10, 29, 29, 100, [])
Then (Should show current line at end of visible section):
  AssertEqual '▐  ▒▒▒█              ▌', result

" Test 25:
Execute (Window showing only a single line):
  let result = scrolly#calculate(200, 1, 15, 15, 15, 100, [])
Then (Should show a minimal visible section with current line):
  AssertEqual '▐   █                ▌', result

" Test 26:
Execute (Custom symbol settings):
  let g:scrolly_symbols = {
        \ 'left': '[',
        \ 'right': ']',
        \ 'current_line': 'X',
        \ 'space': '.',
        \ 'visible': '#',
        \ 'error_in_view': 'V',
        \ 'error': 'e',
        \ }
  call scrolly#init()
  let result = scrolly#calculate(200, 20, 10, 29, 15, 100, [{'lnum': 15}, {'lnum': 40}])
Then (Should use custom symbols):
  AssertEqual '[..VX##.e............]', result

" Test 27:
Execute (Multiple errors on same line):
  let same_line_errors = [{'lnum': 15}, {'lnum': 15}, {'lnum': 15}, {'lnum': 15}]
  let result = scrolly#calculate(200, 20, 10, 29, 20, 100, same_line_errors)
Then (Should count the line only once):
  AssertEqual '▐  ▓▒█▒              ▌', result

" Test 28:
Execute (Zero total lines error handling):
  let result = scrolly#calculate(200, 20, 0, 0, 0, 0, [{'lnum': 1}])
Then (Should handle zero lines case gracefully):
  AssertEqual '', result

" Test 29:
Execute (Window width just above minimum threshold):
  let min_width = get(g:, 'scrolly_minwidth', 150)
  let result = scrolly#calculate(min_width + 1, 20, 10, 29, 15, 100, [])
Then (Should still render when just above threshold):
  AssertNotEqual '', result

" Test 30:
Execute (Very small window height):
  let result = scrolly#calculate(200, 2, 10, 11, 10, 100, [])
Then (Should handle tiny window appropriately):
  AssertEqual '▐  █                 ▌', result

" Test 31:
Execute (Very small visible portion relative to total):
  let result = scrolly#calculate(200, 5, 5000, 5004, 5002, 10000, [])
Then (Should show a very small visible section):
  AssertEqual '▐          █         ▌', result

" Test 32:
Execute (Window exactly at the end of file):
  let result = scrolly#calculate(200, 20, 80, 99, 90, 100, [])
Then (Should position window correctly at end of file):
  AssertEqual '▐                ▒▒█▒▌', result

" Test 33:
Execute (Window larger than file with overflow):
  let result = scrolly#calculate(200, 30, 0, 19, 10, 20, [])
Then (Should handle overflow when window larger than file):
  AssertEqual '▐▒▒▒▒▒▒█▒▒▒▒▒▒╲╲╲╲╲╲╲▌', result

" Test 26:
Execute (Custom symbol settings - comprehensive test of all symbols):
  let g:scrolly_symbols = {
        \ 'left': '[',
        \ 'right': ']',
        \ 'current_line': 'X',
        \ 'space': '.',
        \ 'visible': '#',
        \ 'error_in_line': 'E',
        \ 'error_in_view': 'V',
        \ 'error': 'e',
        \ 'overflow_line': 'o'
        \ }

  " Test 1: Basic bar with current line and visible area
  let result1 = scrolly#calculate(200, 20, 10, 29, 15, 100, [])

  " Test 2: With errors in different positions
  let error_list = [
        \ {'lnum': 15},
        \ {'lnum': 20},
        \ {'lnum': 50}
        \ ]
  let result2 = scrolly#calculate(200, 20, 10, 29, 15, 100, error_list)

  " Test 3: With overflow
  let result3 = scrolly#calculate(200, 30, 10, 29, 15, 30, [])

Then (Should use all custom symbols correctly):
  " Basic test with just current line and visible area
  AssertEqual '[..#X##..............]', result1

  " Test with all error types
  AssertEqual '[..VE##...e..........]', result2

  " Test with overflow line symbols
  AssertEqual '[.....##X#######ooooo]', result3

" Test 27:
Execute (Errors over g:scrolly_loc_limit):
  let g:scrolly_loc_limit = 49
  let large_error_list = []
  for i in range(1, 100)
    call add(large_error_list, {'lnum': i})
  endfor
  let result = scrolly#calculate(200, 50, 0, 49, 1, 100, large_error_list)
Then (Should handle many errors appropriately):
  AssertEqual '▐▀▓▓▓▓▓▓▓▓▓          ▌', result

" Test 28:
Execute (Errors over the default g:scrolly_loc_limit - now set to 0):
  let g:scrolly_loc_limit = 0
  let large_error_list = []
  for i in range(1, 5000)
    call add(large_error_list, {'lnum': i})
  endfor
  let result = scrolly#calculate(200, 50, 0, 49, 1, 5000, large_error_list)
Then (Should show all the errors):
  AssertEqual '▐▀▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▌', result
